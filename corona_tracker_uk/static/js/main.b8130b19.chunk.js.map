{"version":3,"sources":["Constants/apolloClient.js","Constants/options.js","Constants/convertData.js","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","addTypename","xAxis","type","yAxis","title","text","chart","spacingLeft","spacingRight","style","color","rangeSelector","selected","series","data","rawData","formattedData","x","y","reduce","acc","curr","push","concat","name","_","cloneDeep","App","React","useState","updateSeries","loading","updateLoading","cachedResults","useRef","options","optionsTemplate","getData","a","convertData","query","gql","then","r","apiResponse","current","applyFilters","event","seriesFiltered","target","value","checked","filter","item","find","noData","length","useEffect","className","size","highcharts","Highcharts","defaultChecked","onChange","render","document","getElementById"],"mappings":"kwBAKA,IAAMA,EAAS,IAAIC,IAAa,CAC9BC,IAAK,4CACLC,MAAO,IAAIC,IAAc,CACvBC,aAAa,MCRF,GACbC,MAAO,CACLC,KAAM,YAERC,MAAO,CACLC,MAAO,CACLC,KAAM,mBAGVC,MAAO,CACLJ,KAAM,OACNK,YAAa,GACbC,aAAc,GACdC,MAAO,CACLC,MAAQ,SAGZC,cAAe,CACbC,SAAU,GAEZR,MAAO,CACLC,KAAM,QAERQ,OAAQ,CACN,CACEC,KAAM,MCvBG,WAACC,GACd,IAAIC,EAAgB,GACpB,IAAK,IAAIC,KAAKF,EAAS,CACrB,IAAIG,EAAIH,EAAQE,GAAGE,QAAO,SAACC,EAAKC,GAC9B,IAAIH,EAAI,GACR,IAAK,IAAID,KAAKI,EACZH,EAAEI,KAAKD,EAAKJ,IAGd,OADAG,EAAMA,EAAIG,OAAO,CAACL,MAEjB,IACHF,EAAcM,KAAK,CACjBE,KAAMP,EACNH,KAAMW,IAAEC,UAAUR,KAGtB,OAAOF,G,QCPHW,EAAM,WAAO,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACThB,EADS,KACDiB,EADC,OAEiBF,IAAMC,UAAS,GAFhC,mBAETE,EAFS,KAEAC,EAFA,KAGZC,EAAgBL,IAAMM,OAAO,IAG7BC,EAAUV,IAAEC,UAAUU,GAC1BD,EAAQtB,OAASA,EAEjB,IAAMwB,EAAO,uCAAG,4BAAAC,EAAA,kEACIC,EADJ,SHPhB5C,EACG6C,MAAM,CACLA,MAAOC,YAAF,OAqBNC,MAAK,SAACC,GAAD,OAAOA,EAAE7B,QGhBD,mBACV8B,GADU,cAEdd,EAAaL,IAAEC,UAAUkB,IACzBX,EAAcY,QAAUpB,IAAEC,UAAUkB,GACpCZ,GAAc,GAJA,2CAAH,qDAOPc,EAAe,SAACC,GACpB,IACIC,EADAxB,EAAOuB,EAAME,OAAOC,MAGxB,IAA6B,IAAzBH,EAAME,OAAOE,QAEfH,EAAiBvB,IAAEC,UAAUb,EAAOuC,QAAO,SAACC,GAAD,OAAUA,EAAK7B,OAASA,UAC9D,CAEL,IAAIP,EAAIQ,IAAEC,UACRO,EAAcY,QAAQS,MAAK,SAACD,GAAD,OAAUA,EAAK7B,OAASA,MAErDwB,EAAiBnC,EAAOU,OAAON,GAEjCa,EAAakB,IAITO,EAA2B,IAAlB1C,EAAO2C,OAMtB,OAJA5B,IAAM6B,WAAU,WACdpB,MACC,IAGD,yBAAKqB,UAAU,aACb,gCACE,kBAAC,IAAD,CAAoBC,KAAK,QACzB,qDAEF,yBAAKD,UAAU,UACX3B,GAAWwB,GACX,wBAAIG,UAAU,UAAd,0BAEA3B,GACA,kBAAC,IAAD,CAAiB6B,WAAYC,IAAY1B,QAASA,IAEnDJ,GAAW,wBAAI2B,UAAU,WAAd,gBAEd,yBAAKA,UAAU,UACb,uCACA,8BACE,0BAAMA,UAAU,gBACd,kDAEE,2BACEI,gBAAgB,EAChB5D,KAAK,WACLgD,MAAM,oBACNa,SAAUjB,KAGd,8CAEE,2BACEgB,gBAAgB,EAChB5D,KAAK,WACLgD,MAAM,gBACNa,SAAUjB,MAIhB,0BAAMY,UAAU,gBACd,mDAEE,2BACEI,gBAAgB,EAChB5D,KAAK,WACLgD,MAAM,qBACNa,SAAUjB,KAGd,6CAEE,2BACEgB,gBAAgB,EAChB5D,KAAK,WACLgD,MAAM,eACNa,SAAUjB,UAU1BkB,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b8130b19.chunk.js","sourcesContent":["\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  uri: \"https://postgres-instance1.herokuapp.com/\",\n  cache: new InMemoryCache({\n    addTypename: false,\n  }),\n});\n\nexport default () =>\n  client\n    .query({\n      query: gql`\n        {\n          cumulativeUkCases {\n            date\n            cumulative_cases\n          }\n          dailyUkDeaths {\n            date\n            daily_deaths\n          }\n          cumulativeUkDeaths {\n            date\n            cumulative_deaths\n          }\n          dailyUkCases {\n            date\n            daily_cases\n          }\n        }\n      `,\n    })\n    .then((r) => r.data);","export default {\n  xAxis: {\n    type: \"datetime\",\n  },\n  yAxis: {\n    title: {\n      text: \"Cases / Deaths\",\n    },\n  },\n  chart: {\n    type: \"line\",\n    spacingLeft: 50,\n    spacingRight: 50,\n    style: {\n      color : \"grey\",\n    }\n  },\n  rangeSelector: {\n    selected: 1,\n  },\n  title: {\n    text: \"2020\",\n  },\n  series: [\n    {\n      data: [],\n    },\n  ],\n};\n","import _ from \"lodash\";\n\nexport default (rawData) => {\n  let formattedData = [];\n  for (let x in rawData) {\n    let y = rawData[x].reduce((acc, curr) => {\n      let y = [];\n      for (let x in curr) {\n        y.push(curr[x]);\n      }\n      acc = acc.concat([y]);\n      return acc;\n    }, []);\n    formattedData.push({\n      name: x,\n      data: _.cloneDeep(y),\n    });\n  }\n  return formattedData;\n};\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport _ from \"lodash\";\nimport \"./index.scss\";\nimport getCoronaData from \"./Constants/apolloClient\";\nimport optionsTemplate from \"./Constants/options\";\nimport convertData from \"./Constants/convertData\";\nimport { FaBriefcaseMedical } from \"react-icons/fa\";\n\nconst App = () => {\n  const [series, updateSeries] = React.useState([]);\n  const [loading, updateLoading] = React.useState(true);\n  let cachedResults = React.useRef([]);\n\n  // setup chart options - the series object holds the data from api\n  let options = _.cloneDeep(optionsTemplate);\n  options.series = series;\n\n  const getData = async () => {\n    let apiResponse = convertData(await getCoronaData());\n    updateSeries(_.cloneDeep(apiResponse));\n    cachedResults.current = _.cloneDeep(apiResponse);\n    updateLoading(false);\n  };\n\n  const applyFilters = (event) => {\n    let name = event.target.value;\n    let seriesFiltered;\n\n    if (event.target.checked === false) {\n      // if checkbox is unchecked filter out the data\n      seriesFiltered = _.cloneDeep(series.filter((item) => item.name !== name));\n    } else {\n      // otherwise find the data from cache and re insert it\n      let x = _.cloneDeep(\n        cachedResults.current.find((item) => item.name === name)\n      );\n      seriesFiltered = series.concat(x);\n    }\n    updateSeries(seriesFiltered);\n  };\n\n  // for use if the user filters out all data\n  const noData = series.length === 0;\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <header>\n        <FaBriefcaseMedical size=\"3em\" />\n        <h2>Uk Corona Statistics</h2>\n      </header>\n      <div className=\"chart\">\n        {!loading && noData && (\n          <h1 className=\"nodata\">Please Adjust Filters</h1>\n        )}\n        {!loading && (\n          <HighchartsReact highcharts={Highcharts} options={options} />\n        )}\n        {loading && <h1 className=\"loading\">Loading....</h1>}\n      </div>\n      <div className=\"filter\">\n        <h4>Filters</h4>\n        <form>\n          <span className=\"filter-group\">\n            <label>\n              Cumulative Cases\n              <input\n                defaultChecked={true}\n                type=\"checkbox\"\n                value=\"cumulativeUkCases\"\n                onChange={applyFilters}\n              />\n            </label>\n            <label>\n              Daily Deaths\n              <input\n                defaultChecked={true}\n                type=\"checkbox\"\n                value=\"dailyUkDeaths\"\n                onChange={applyFilters}\n              />\n            </label>\n          </span>\n          <span className=\"filter-group\">\n            <label>\n              Cumulative Deaths\n              <input\n                defaultChecked={true}\n                type=\"checkbox\"\n                value=\"cumulativeUkDeaths\"\n                onChange={applyFilters}\n              />\n            </label>\n            <label>\n              Daily Cases\n              <input\n                defaultChecked={true}\n                type=\"checkbox\"\n                value=\"dailyUkCases\"\n                onChange={applyFilters}\n              />\n            </label>\n          </span>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}